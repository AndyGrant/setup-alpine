name: CI
on: push

jobs:
  test-base:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        alpine:
          - latest-stable
          - edge
        arch:
          - x86_64
          - aarch64  # emulated
    steps:
      - name: Setup Alpine Linux ${{ matrix.alpine }} ${{ matrix.arch }}
        uses: jirutka/setup-alpine@master
        with:
          arch: ${{ matrix.arch }}
          branch: ${{ matrix.alpine }}
        id: setup-alpine

      - name: Output environment
        run: |
          uname -a
          cat /etc/os-release
          env
        shell: alpine-sh {0}

      - name: Check that 'uname -m' returns ${{ matrix.arch }}
        run: |
          uname -m
          test "$(uname -m)" = "${{ matrix.arch }}"
        shell: alpine-sh {0}

      - name: Check that $USER is 'runner' when shell is 'alpine-sh {0}'
        run: |
          id -un
          test "$(id -un)" = 'runner'
        shell: alpine-sh {0}

      - name: Check that $USER is 'root' when shell is 'alpine-sh --root {0}'
        run: |
          id -un
          test "$(id -un)" = 'root'
        shell: alpine-sh --root {0}

      - name: Check that steps.<step>.outputs.root-path is set and points to the chroot dir
        run: test -f "${{ steps.setup-alpine.outputs.root-path }}"/etc/alpine-release

  test-multi:
    runs-on: ubuntu-latest
    steps:
      - name: Install latest Alpine Linux x86_64
        uses: jirutka/setup-alpine@master
        with:
          arch: x86_64

      - name: Install latest Alpine Linux aarch64
        uses: jirutka/setup-alpine@master
        with:
          arch: aarch64

      - name: Check that shell 'alpine-x86_64-sh {0}' is x86_64
        run: |
          uname -m
          test "$(uname -m)" = 'x86_64'
        shell: alpine-x86_64-sh {0}

      - name: Check that shell 'alpine-aarch64-sh {0}' is aarch64
        run: |
          uname -m
          test "$(uname -m)" = 'aarch64'
        shell: alpine-aarch64-sh {0}

      - name: Check that shell 'alpine-sh {0}' is the latest one (aarch64)
        run: |
          uname -m
          test "$(uname -m)" = 'aarch64'
        shell: alpine-aarch64-sh {0}
